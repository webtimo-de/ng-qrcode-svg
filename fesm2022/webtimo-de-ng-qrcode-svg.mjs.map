{"version":3,"file":"webtimo-de-ng-qrcode-svg.mjs","sources":["../../../projects/ng-qrcode-svg/src/lib/qrcode-generator.ts","../../../projects/ng-qrcode-svg/src/lib/qrcode-svg.component.ts","../../../projects/ng-qrcode-svg/src/lib/qrcode-svg.module.ts","../../../projects/ng-qrcode-svg/src/webtimo-de-ng-qrcode-svg.ts"],"sourcesContent":["/*\r\n * QR Code generator library (TypeScript)\r\n *\r\n * Copyright (c) Project Nayuki. (MIT License)\r\n * https://www.nayuki.io/page/qr-code-generator-library\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n * this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to\r\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n * the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n * - The above copyright notice and this permission notice shall be included in\r\n *   all copies or substantial portions of the Software.\r\n * - The Software is provided \"as is\", without warranty of any kind, express or\r\n *   implied, including but not limited to the warranties of merchantability,\r\n *   fitness for a particular purpose and noninfringement. In no event shall the\r\n *   authors or copyright holders be liable for any claim, damages or other\r\n *   liability, whether in an action of contract, tort or otherwise, arising from,\r\n *   out of or in connection with the Software or the use or other dealings in the\r\n *   Software.\r\n */\r\n\r\ntype bit = number;\r\ntype byte = number;\r\ntype int = number;\r\n\r\nclass QrCode {\r\n    public static encodeText(text: string, ecl: Ecc): QrCode {\r\n        const segs: Array<QrSegment> = QrSegment.makeSegments(text);\r\n        return QrCode.encodeSegments(segs, ecl);\r\n    }\r\n\r\n    public static encodeBinary(data: Readonly<Array<byte>>, ecl: Ecc): QrCode {\r\n        const seg: QrSegment = QrSegment.makeBytes(data);\r\n        return QrCode.encodeSegments([seg], ecl);\r\n    }\r\n\r\n    public static encodeSegments(\r\n        segs: Readonly<Array<QrSegment>>,\r\n        ecl: Ecc,\r\n        minVersion: int = 1,\r\n        maxVersion: int = 40,\r\n        mask: int = -1,\r\n        boostEcl: boolean = true\r\n    ): QrCode {\r\n        if (\r\n            !(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) ||\r\n            mask < -1 ||\r\n            mask > 7\r\n        ) {\r\n            throw new RangeError('Invalid value');\r\n        }\r\n\r\n        let version: int;\r\n        let dataUsedBits: int;\r\n        for (version = minVersion; ; version++) {\r\n            const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8;\r\n            const usedBits: number = QrSegment.getTotalBits(segs, version);\r\n            if (usedBits <= dataCapacityBits) {\r\n                dataUsedBits = usedBits;\r\n                break;\r\n            }\r\n            if (version >= maxVersion) {\r\n                throw new RangeError('Data too long');\r\n            }\r\n        }\r\n\r\n        for (const newEcl of [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]) {\r\n            if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {\r\n                ecl = newEcl;\r\n            }\r\n        }\r\n\r\n        let bb: Array<bit> = [];\r\n        for (const seg of segs) {\r\n            appendBits(seg.mode.modeBits, 4, bb);\r\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\r\n            for (const b of seg.getData()) {\r\n                bb.push(b);\r\n            }\r\n        }\r\n        assert(bb.length == dataUsedBits);\r\n\r\n        const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8;\r\n        assert(bb.length <= dataCapacityBits);\r\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\r\n        appendBits(0, (8 - (bb.length % 8)) % 8, bb);\r\n        assert(bb.length % 8 == 0);\r\n\r\n        for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) {\r\n            appendBits(padByte, 8, bb);\r\n        }\r\n\r\n        let dataCodewords: Array<byte> = [];\r\n        while (dataCodewords.length * 8 < bb.length) {\r\n            dataCodewords.push(0);\r\n        }\r\n        bb.forEach((b: bit, i: int) => (dataCodewords[i >>> 3] |= b << (7 - (i & 7))));\r\n\r\n        return new QrCode(version, ecl, dataCodewords, mask);\r\n    }\r\n\r\n    public readonly size: int;\r\n    public readonly mask: int;\r\n\r\n    private readonly modules: Array<Array<boolean>> = [];\r\n    private readonly isFunction: Array<Array<boolean>> = [];\r\n\r\n    public constructor(\r\n        public readonly version: int,\r\n        public readonly errorCorrectionLevel: Ecc,\r\n        dataCodewords: Readonly<Array<byte>>,\r\n        msk: int\r\n    ) {\r\n        if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {\r\n            throw new RangeError('Version value out of range');\r\n        }\r\n        if (msk < -1 || msk > 7) {\r\n            throw new RangeError('Mask value out of range');\r\n        }\r\n        this.size = version * 4 + 17;\r\n\r\n        let row: Array<boolean> = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            row.push(false);\r\n        }\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.modules.push(row.slice());\r\n            this.isFunction.push(row.slice());\r\n        }\r\n\r\n        this.drawFunctionPatterns();\r\n        const allCodewords: Array<byte> = this.addEccAndInterleave(dataCodewords);\r\n        this.drawCodewords(allCodewords);\r\n\r\n        if (msk == -1) {\r\n            let minPenalty: int = 1000000000;\r\n            for (let i = 0; i < 8; i++) {\r\n                this.applyMask(i);\r\n                this.drawFormatBits(i);\r\n                const penalty: int = this.getPenaltyScore();\r\n                if (penalty < minPenalty) {\r\n                    msk = i;\r\n                    minPenalty = penalty;\r\n                }\r\n                this.applyMask(i);\r\n            }\r\n        }\r\n        assert(0 <= msk && msk <= 7);\r\n        this.mask = msk;\r\n        this.applyMask(msk);\r\n        this.drawFormatBits(msk);\r\n\r\n        this.isFunction = [];\r\n    }\r\n\r\n    public getModule(x: int, y: int): boolean {\r\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\r\n    }\r\n\r\n    private drawFunctionPatterns(): void {\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.setFunctionModule(6, i, i % 2 == 0);\r\n            this.setFunctionModule(i, 6, i % 2 == 0);\r\n        }\r\n\r\n        this.drawFinderPattern(3, 3);\r\n        this.drawFinderPattern(this.size - 4, 3);\r\n        this.drawFinderPattern(3, this.size - 4);\r\n\r\n        const alignPatPos: Array<int> = this.getAlignmentPatternPositions();\r\n        const numAlign: int = alignPatPos.length;\r\n        for (let i = 0; i < numAlign; i++) {\r\n            for (let j = 0; j < numAlign; j++) {\r\n                if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0))) {\r\n                    this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.drawFormatBits(0);\r\n        this.drawVersion();\r\n    }\r\n\r\n    private drawFormatBits(mask: int): void {\r\n        const data: int = (this.errorCorrectionLevel.formatBits << 3) | mask;\r\n        let rem: int = data;\r\n        for (let i = 0; i < 10; i++) {\r\n            rem = (rem << 1) ^ ((rem >>> 9) * 0x537);\r\n        }\r\n        const bits = ((data << 10) | rem) ^ 0x5412;\r\n        assert(bits >>> 15 == 0);\r\n\r\n        for (let i = 0; i <= 5; i++) {\r\n            this.setFunctionModule(8, i, getBit(bits, i));\r\n        }\r\n        this.setFunctionModule(8, 7, getBit(bits, 6));\r\n        this.setFunctionModule(8, 8, getBit(bits, 7));\r\n        this.setFunctionModule(7, 8, getBit(bits, 8));\r\n        for (let i = 9; i < 15; i++) {\r\n            this.setFunctionModule(14 - i, 8, getBit(bits, i));\r\n        }\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\r\n        }\r\n        for (let i = 8; i < 15; i++) {\r\n            this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\r\n        }\r\n        this.setFunctionModule(8, this.size - 8, true);\r\n    }\r\n\r\n    private drawVersion(): void {\r\n        if (this.version < 7) {\r\n            return;\r\n        }\r\n\r\n        let rem: int = this.version;\r\n        for (let i = 0; i < 12; i++) {\r\n            rem = (rem << 1) ^ ((rem >>> 11) * 0x1f25);\r\n        }\r\n        const bits: int = (this.version << 12) | rem; // uint18\r\n        assert(bits >>> 18 == 0);\r\n\r\n        for (let i = 0; i < 18; i++) {\r\n            const color: boolean = getBit(bits, i);\r\n            const a: int = this.size - 11 + (i % 3);\r\n            const b: int = Math.floor(i / 3);\r\n            this.setFunctionModule(a, b, color);\r\n            this.setFunctionModule(b, a, color);\r\n        }\r\n    }\r\n\r\n    private drawFinderPattern(x: int, y: int): void {\r\n        for (let dy = -4; dy <= 4; dy++) {\r\n            for (let dx = -4; dx <= 4; dx++) {\r\n                const dist: int = Math.max(Math.abs(dx), Math.abs(dy));\r\n                const xx: int = x + dx;\r\n                const yy: int = y + dy;\r\n                if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) {\r\n                    this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawAlignmentPattern(x: int, y: int): void {\r\n        for (let dy = -2; dy <= 2; dy++) {\r\n            for (let dx = -2; dx <= 2; dx++) {\r\n                this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFunctionModule(x: int, y: int, isDark: boolean): void {\r\n        this.modules[y][x] = isDark;\r\n        this.isFunction[y][x] = true;\r\n    }\r\n\r\n    private addEccAndInterleave(data: Readonly<Array<byte>>): Array<byte> {\r\n        const ver: int = this.version;\r\n        const ecl: Ecc = this.errorCorrectionLevel;\r\n        if (data.length != QrCode.getNumDataCodewords(ver, ecl)) {\r\n            throw new RangeError('Invalid argument');\r\n        }\r\n\r\n        const numBlocks: int = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n        const blockEccLen: int = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\r\n        const rawCodewords: int = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\r\n        const numShortBlocks: int = numBlocks - (rawCodewords % numBlocks);\r\n        const shortBlockLen: int = Math.floor(rawCodewords / numBlocks);\r\n\r\n        let blocks: Array<Array<byte>> = [];\r\n        const rsDiv: Array<byte> = QrCode.reedSolomonComputeDivisor(blockEccLen);\r\n        for (let i = 0, k = 0; i < numBlocks; i++) {\r\n            let dat: Array<byte> = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\r\n            k += dat.length;\r\n            const ecc: Array<byte> = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\r\n            if (i < numShortBlocks) {\r\n                dat.push(0);\r\n            }\r\n            blocks.push(dat.concat(ecc));\r\n        }\r\n\r\n        let result: Array<byte> = [];\r\n        for (let i = 0; i < blocks[0].length; i++) {\r\n            blocks.forEach((block, j) => {\r\n                if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) {\r\n                    result.push(block[i]);\r\n                }\r\n            });\r\n        }\r\n        assert(result.length == rawCodewords);\r\n        return result;\r\n    }\r\n\r\n    private drawCodewords(data: Readonly<Array<byte>>): void {\r\n        if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {\r\n            throw new RangeError('Invalid argument');\r\n        }\r\n        let i: int = 0;\r\n        for (let right = this.size - 1; right >= 1; right -= 2) {\r\n            if (right == 6) {\r\n                right = 5;\r\n            }\r\n            for (let vert = 0; vert < this.size; vert++) {\r\n                for (let j = 0; j < 2; j++) {\r\n                    const x: int = right - j;\r\n                    const upward: boolean = ((right + 1) & 2) == 0;\r\n                    const y: int = upward ? this.size - 1 - vert : vert;\r\n                    if (!this.isFunction[y][x] && i < data.length * 8) {\r\n                        this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        assert(i == data.length * 8);\r\n    }\r\n\r\n    private applyMask(mask: int): void {\r\n        if (mask < 0 || mask > 7) {\r\n            throw new RangeError('Mask value out of range');\r\n        }\r\n        for (let y = 0; y < this.size; y++) {\r\n            for (let x = 0; x < this.size; x++) {\r\n                let invert: boolean;\r\n                switch (mask) {\r\n                    case 0:\r\n                        invert = (x + y) % 2 == 0;\r\n                        break;\r\n                    case 1:\r\n                        invert = y % 2 == 0;\r\n                        break;\r\n                    case 2:\r\n                        invert = x % 3 == 0;\r\n                        break;\r\n                    case 3:\r\n                        invert = (x + y) % 3 == 0;\r\n                        break;\r\n                    case 4:\r\n                        invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\r\n                        break;\r\n                    case 5:\r\n                        invert = ((x * y) % 2) + ((x * y) % 3) == 0;\r\n                        break;\r\n                    case 6:\r\n                        invert = (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;\r\n                        break;\r\n                    case 7:\r\n                        invert = (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unreachable');\r\n                }\r\n                if (!this.isFunction[y][x] && invert) {\r\n                    this.modules[y][x] = !this.modules[y][x];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPenaltyScore(): int {\r\n        let result: int = 0;\r\n\r\n        for (let y = 0; y < this.size; y++) {\r\n            let runColor = false;\r\n            let runX = 0;\r\n            let runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n            for (let x = 0; x < this.size; x++) {\r\n                if (this.modules[y][x] == runColor) {\r\n                    runX++;\r\n                    if (runX == 5) {\r\n                        result += QrCode.PENALTY_N1;\r\n                    } else if (runX > 5) {\r\n                        result++;\r\n                    }\r\n                } else {\r\n                    this.finderPenaltyAddHistory(runX, runHistory);\r\n                    if (!runColor) {\r\n                        result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n                    }\r\n                    runColor = this.modules[y][x];\r\n                    runX = 1;\r\n                }\r\n            }\r\n            result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\r\n        }\r\n\r\n        for (let x = 0; x < this.size; x++) {\r\n            let runColor = false;\r\n            let runY = 0;\r\n            let runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n            for (let y = 0; y < this.size; y++) {\r\n                if (this.modules[y][x] == runColor) {\r\n                    runY++;\r\n                    if (runY == 5) {\r\n                        result += QrCode.PENALTY_N1;\r\n                    } else if (runY > 5) {\r\n                        result++;\r\n                    }\r\n                } else {\r\n                    this.finderPenaltyAddHistory(runY, runHistory);\r\n                    if (!runColor) {\r\n                        result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\r\n                    }\r\n                    runColor = this.modules[y][x];\r\n                    runY = 1;\r\n                }\r\n            }\r\n            result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\r\n        }\r\n\r\n        for (let y = 0; y < this.size - 1; y++) {\r\n            for (let x = 0; x < this.size - 1; x++) {\r\n                const color: boolean = this.modules[y][x];\r\n                if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1]) {\r\n                    result += QrCode.PENALTY_N2;\r\n                }\r\n            }\r\n        }\r\n\r\n        let dark: int = 0;\r\n        for (const row of this.modules) {\r\n            dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\r\n        }\r\n        const total: int = this.size * this.size;\r\n        const k: int = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\r\n        assert(0 <= k && k <= 9);\r\n        result += k * QrCode.PENALTY_N4;\r\n        assert(0 <= result && result <= 2568888);\r\n        return result;\r\n    }\r\n\r\n    private getAlignmentPatternPositions(): Array<int> {\r\n        if (this.version == 1) {\r\n            return [];\r\n        } else {\r\n            const numAlign: int = Math.floor(this.version / 7) + 2;\r\n            const step: int = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\r\n            let result: Array<int> = [6];\r\n            for (let pos = this.size - 7; result.length < numAlign; pos -= step) {\r\n                result.splice(1, 0, pos);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    private static getNumRawDataModules(ver: int): int {\r\n        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {\r\n            throw new RangeError('Version number out of range');\r\n        }\r\n        let result: int = (16 * ver + 128) * ver + 64;\r\n        if (ver >= 2) {\r\n            const numAlign: int = Math.floor(ver / 7) + 2;\r\n            result -= (25 * numAlign - 10) * numAlign - 55;\r\n            if (ver >= 7) {\r\n                result -= 36;\r\n            }\r\n        }\r\n        assert(208 <= result && result <= 29648);\r\n        return result;\r\n    }\r\n\r\n    private static getNumDataCodewords(ver: int, ecl: Ecc): int {\r\n        return (\r\n            Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\r\n            QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]\r\n        );\r\n    }\r\n\r\n    private static reedSolomonComputeDivisor(degree: int): Array<byte> {\r\n        if (degree < 1 || degree > 255) {\r\n            throw new RangeError('Degree out of range');\r\n        }\r\n        let result: Array<byte> = [];\r\n        for (let i = 0; i < degree - 1; i++) {\r\n            result.push(0);\r\n        }\r\n        result.push(1);\r\n\r\n        let root = 1;\r\n        for (let i = 0; i < degree; i++) {\r\n            for (let j = 0; j < result.length; j++) {\r\n                result[j] = QrCode.reedSolomonMultiply(result[j], root);\r\n                if (j + 1 < result.length) {\r\n                    result[j] ^= result[j + 1];\r\n                }\r\n            }\r\n            root = QrCode.reedSolomonMultiply(root, 0x02);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static reedSolomonComputeRemainder(data: Readonly<Array<byte>>, divisor: Readonly<Array<byte>>): Array<byte> {\r\n        let result: Array<byte> = divisor.map((_) => 0);\r\n        for (const b of data) {\r\n            const factor: byte = b ^ (result.shift() as byte);\r\n            result.push(0);\r\n            divisor.forEach((coef, i) => (result[i] ^= QrCode.reedSolomonMultiply(coef, factor)));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static reedSolomonMultiply(x: byte, y: byte): byte {\r\n        if (x >>> 8 != 0 || y >>> 8 != 0) {\r\n            throw new RangeError('Byte out of range');\r\n        }\r\n        let z: int = 0;\r\n        for (let i = 7; i >= 0; i--) {\r\n            z = (z << 1) ^ ((z >>> 7) * 0x11d);\r\n            z ^= ((y >>> i) & 1) * x;\r\n        }\r\n        assert(z >>> 8 == 0);\r\n        return z as byte;\r\n    }\r\n\r\n    private finderPenaltyCountPatterns(runHistory: Readonly<Array<int>>): int {\r\n        const n: int = runHistory[1];\r\n        assert(n <= this.size * 3);\r\n        const core: boolean =\r\n            n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\r\n        return (\r\n            (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) +\r\n            (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0)\r\n        );\r\n    }\r\n\r\n    private finderPenaltyTerminateAndCount(currentRunColor: boolean, currentRunLength: int, runHistory: Array<int>): int {\r\n        if (currentRunColor) {\r\n            this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n            currentRunLength = 0;\r\n        }\r\n        currentRunLength += this.size;\r\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n        return this.finderPenaltyCountPatterns(runHistory);\r\n    }\r\n\r\n    private finderPenaltyAddHistory(currentRunLength: int, runHistory: Array<int>): void {\r\n        if (runHistory[0] == 0) {\r\n            currentRunLength += this.size;\r\n        } // Add light border to initial run\r\n        runHistory.pop();\r\n        runHistory.unshift(currentRunLength);\r\n    }\r\n\r\n    public static readonly MIN_VERSION: int = 1;\r\n    public static readonly MAX_VERSION: int = 40;\r\n\r\n    private static readonly PENALTY_N1: int = 3;\r\n    private static readonly PENALTY_N2: int = 3;\r\n    private static readonly PENALTY_N3: int = 40;\r\n    private static readonly PENALTY_N4: int = 10;\r\n\r\n    private static readonly ECC_CODEWORDS_PER_BLOCK: Array<Array<int>> = [\r\n        // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n        //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n        [\r\n            -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30,\r\n            30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30\r\n        ], // Low\r\n        [\r\n            -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28,\r\n            28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28\r\n        ], // Medium\r\n        [\r\n            -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30,\r\n            30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30\r\n        ], // Quartile\r\n        [\r\n            -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30,\r\n            30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30\r\n        ] // High\r\n    ];\r\n\r\n    private static readonly NUM_ERROR_CORRECTION_BLOCKS: Array<Array<int>> = [\r\n        // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n        //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n        [\r\n            -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18,\r\n            19, 19, 20, 21, 22, 24, 25\r\n        ], // Low\r\n        [\r\n            -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31,\r\n            33, 35, 37, 38, 40, 43, 45, 47, 49\r\n        ], // Medium\r\n        [\r\n            -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40,\r\n            43, 45, 48, 51, 53, 56, 59, 62, 65, 68\r\n        ], // Quartile\r\n        [\r\n            -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48,\r\n            51, 54, 57, 60, 63, 66, 70, 74, 77, 81\r\n        ] // High\r\n    ];\r\n}\r\n\r\nfunction appendBits(val: int, len: int, bb: Array<bit>): void {\r\n    if (len < 0 || len > 31 || val >>> len != 0) {\r\n        throw new RangeError('Value out of range');\r\n    }\r\n    for (let i = len - 1; i >= 0; i--) {\r\n        bb.push((val >>> i) & 1);\r\n    }\r\n}\r\n\r\nfunction getBit(x: int, i: int): boolean {\r\n    return ((x >>> i) & 1) != 0;\r\n}\r\n\r\nfunction assert(cond: boolean): void {\r\n    if (!cond) {\r\n        throw new Error('Assertion error');\r\n    }\r\n}\r\n\r\nclass QrSegment {\r\n    public static makeBytes(data: Readonly<Array<byte>>): QrSegment {\r\n        let bb: Array<bit> = [];\r\n        for (const b of data) {\r\n            appendBits(b, 8, bb);\r\n        }\r\n        return new QrSegment(Mode.BYTE, data.length, bb);\r\n    }\r\n\r\n    public static makeNumeric(digits: string): QrSegment {\r\n        if (!QrSegment.isNumeric(digits)) {\r\n            throw new RangeError('String contains non-numeric characters');\r\n        }\r\n        let bb: Array<bit> = [];\r\n        for (let i = 0; i < digits.length;) {\r\n            const n: int = Math.min(digits.length - i, 3);\r\n            appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\r\n            i += n;\r\n        }\r\n        return new QrSegment(Mode.NUMERIC, digits.length, bb);\r\n    }\r\n\r\n    public static makeAlphanumeric(text: string): QrSegment {\r\n        if (!QrSegment.isAlphanumeric(text)) {\r\n            throw new RangeError('String contains unencodable characters in alphanumeric mode');\r\n        }\r\n        let bb: Array<bit> = [];\r\n        let i: int;\r\n        for (i = 0; i + 2 <= text.length; i += 2) {\r\n            let temp: int = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\r\n            temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\r\n            appendBits(temp, 11, bb);\r\n        }\r\n        if (i < text.length) {\r\n            appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\r\n        }\r\n        return new QrSegment(Mode.ALPHANUMERIC, text.length, bb);\r\n    }\r\n\r\n    public static makeSegments(text: string): Array<QrSegment> {\r\n        if (text == '') {\r\n            return [];\r\n        } else if (QrSegment.isNumeric(text)) {\r\n            return [QrSegment.makeNumeric(text)];\r\n        } else if (QrSegment.isAlphanumeric(text)) {\r\n            return [QrSegment.makeAlphanumeric(text)];\r\n        } else {\r\n            return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\r\n        }\r\n    }\r\n\r\n    public static makeEci(assignVal: int): QrSegment {\r\n        let bb: Array<bit> = [];\r\n        if (assignVal < 0) {\r\n            throw new RangeError('ECI assignment value out of range');\r\n        } else if (assignVal < 1 << 7) {\r\n            appendBits(assignVal, 8, bb);\r\n        } else if (assignVal < 1 << 14) {\r\n            appendBits(0b10, 2, bb);\r\n            appendBits(assignVal, 14, bb);\r\n        } else if (assignVal < 1000000) {\r\n            appendBits(0b110, 3, bb);\r\n            appendBits(assignVal, 21, bb);\r\n        } else {\r\n            throw new RangeError('ECI assignment value out of range');\r\n        }\r\n        return new QrSegment(Mode.ECI, 0, bb);\r\n    }\r\n\r\n    public static isNumeric(text: string): boolean {\r\n        return QrSegment.NUMERIC_REGEX.test(text);\r\n    }\r\n\r\n    public static isAlphanumeric(text: string): boolean {\r\n        return QrSegment.ALPHANUMERIC_REGEX.test(text);\r\n    }\r\n\r\n    public constructor(public readonly mode: Mode, public readonly numChars: int, private readonly bitData: Array<bit>) {\r\n        if (numChars < 0) {\r\n            throw new RangeError('Invalid argument');\r\n        }\r\n        this.bitData = bitData.slice();\r\n    }\r\n\r\n    public getData(): Array<bit> {\r\n        return this.bitData.slice();\r\n    }\r\n\r\n    public static getTotalBits(segs: Readonly<Array<QrSegment>>, version: int): number {\r\n        let result: number = 0;\r\n        for (const seg of segs) {\r\n            const ccbits: int = seg.mode.numCharCountBits(version);\r\n            if (seg.numChars >= 1 << ccbits) {\r\n                return Infinity;\r\n            }\r\n            result += 4 + ccbits + seg.bitData.length;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static toUtf8ByteArray(str: string): Array<byte> {\r\n        str = encodeURI(str);\r\n        let result: Array<byte> = [];\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (str.charAt(i) != '%') {\r\n                result.push(str.charCodeAt(i));\r\n            } else {\r\n                result.push(parseInt(str.substring(i + 1, i + 3), 16));\r\n                i += 2;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static readonly NUMERIC_REGEX: RegExp = /^[0-9]*$/;\r\n    private static readonly ALPHANUMERIC_REGEX: RegExp = /^[A-Z0-9 $%*+.\\/:-]*$/;\r\n    private static readonly ALPHANUMERIC_CHARSET: string = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\r\n}\r\n\r\nclass Ecc {\r\n    public static readonly LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\r\n    public static readonly MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\r\n    public static readonly QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\r\n    public static readonly HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\r\n\r\n    public static readonly low = this.LOW\r\n    public static readonly medium = this.MEDIUM\r\n    public static readonly quartile = this.QUARTILE\r\n    public static readonly high = this.HIGH\r\n\r\n    private constructor(public readonly ordinal: int, public readonly formatBits: int) {\r\n    }\r\n}\r\n\r\nclass Mode {\r\n    public static readonly NUMERIC = new Mode(0x1, [10, 12, 14]);\r\n    public static readonly ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\r\n    public static readonly BYTE = new Mode(0x4, [8, 16, 16]);\r\n    public static readonly KANJI = new Mode(0x8, [8, 10, 12]);\r\n    public static readonly ECI = new Mode(0x7, [0, 0, 0]);\r\n\r\n    private constructor(public readonly modeBits: int, private readonly numBitsCharCount: [int, int, int]) {\r\n    }\r\n\r\n    public numCharCountBits(ver: int): int {\r\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\r\n    }\r\n}\r\n\r\nexport {QrCode, Ecc};\r\n","import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {Ecc, QrCode} from './qrcode-generator';\r\n\r\nconst VALID_COLOR_REGEX = /^#(?:[0-9a-fA-F]{3,4}){1,2}$/;\r\n\r\n@Component({\r\n    selector: 'qrcode-svg',\r\n    template: `\r\n        <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                version=\"1.1\"\r\n                stroke=\"none\"\r\n                [attr.alt]=\"alt\"\r\n                [attr.aria-label]=\"ariaLabel\"\r\n                [attr.width]=\"size\"\r\n                [attr.height]=\"size\"\r\n                [attr.viewBox]=\"viewBox\"\r\n        >\r\n            <rect width=\"100%\" height=\"100%\" [attr.fill]=\"backgroundColor\"/>\r\n            <path [attr.d]=\"d\" [attr.fill]=\"foregroundColor\"/>\r\n        </svg>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class QrcodeSvgComponent implements OnChanges {\r\n    @Input() value!: string;\r\n    @Input() ecl: 'low' | 'medium' | 'quartile' | 'high' = 'medium';\r\n    @Input() borderSize = 2;\r\n\r\n    @Input() size: string | number = 250;\r\n    @Input() backgroundColor = '#FFFFFF';\r\n    @Input() foregroundColor = '#000000';\r\n\r\n    @Input() alt: string | undefined;\r\n    @Input() ariaLabel: string | undefined;\r\n\r\n    private qr!: QrCode;\r\n\r\n    viewBox!: string;\r\n    d!: string;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.validateInputs();\r\n\r\n        if (this.skipUpdate(changes)) {\r\n            return;\r\n        }\r\n\r\n        this.qr = QrCode.encodeText(this.value, Ecc[this.ecl]);\r\n        const s = this.qr.size + this.borderSize * 2;\r\n        this.viewBox = `0 0 ${s} ${s}`;\r\n        this.d = this.createD(this.borderSize);\r\n    }\r\n\r\n    private validateInputs(): void {\r\n        if (!this.value) {\r\n            throw Error('[@webtimo-de/ng-qrcode-svg] You must provide a value!');\r\n        }\r\n\r\n        if (!VALID_COLOR_REGEX.test(this.backgroundColor)) {\r\n            throw Error('[@webtimo-de/ng-qrcode-svg] You must provide a valid backgroundColor (HEX RGB) eg: #FFFFFF');\r\n        }\r\n\r\n        if (!VALID_COLOR_REGEX.test(this.foregroundColor)) {\r\n            throw Error('[@webtimo-de/ng-qrcode-svg] You must provide a valid foregroundColor (HEX RGB) eg: #000000');\r\n        }\r\n    }\r\n\r\n    private skipUpdate({backgroundColor, foregroundColor, size}: SimpleChanges): boolean {\r\n        const bgColorChanged = backgroundColor?.currentValue && !backgroundColor?.firstChange;\r\n        const fgColorChanged = foregroundColor?.currentValue && !foregroundColor.firstChange;\r\n        const sizeChanged = size?.currentValue && !size.firstChange;\r\n\r\n        return bgColorChanged || fgColorChanged || sizeChanged;\r\n    }\r\n\r\n    private createD(borderSize: number): string {\r\n        const parts: string[] = [];\r\n        for (let y = 0; y < this.qr.size; y++) {\r\n            for (let x = 0; x < this.qr.size; x++) {\r\n                if (this.qr.getModule(x, y)) {\r\n                    parts.push(`M${x + borderSize},${y + borderSize}h1v1h-1z`);\r\n                }\r\n            }\r\n        }\r\n        return parts.join(' ');\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {QrcodeSvgComponent} from './qrcode-svg.component';\r\n\r\n@NgModule({\r\n    declarations: [QrcodeSvgComponent],\r\n    imports: [CommonModule],\r\n    exports: [QrcodeSvgComponent]\r\n})\r\nexport class QrcodeSvgModule {\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}